@arr = global [6 x i32] zeroinitializer, align 16
define i32 @main() {
	%l0 = alloca i32, align 4
	%l1 = alloca i32, align 4
	%l2 = alloca i32, align 4
	%l3 = alloca i32, align 4
	%t4 = mul nsw i32 0, 1
	%t5 = mul nsw i32 %t4, 4
	%t28 = getelementptr inbounds [6 x i32], [6 x i32]* @arr, i64 0, i64 0
	%t29 = bitcast i32* %t28 to i8*
	%t31 = sext i32 %t5 to i64
	%t30 = getelementptr inbounds i8, i8* %t29, i64 %t31
	%t6 = bitcast i8* %t30 to i32*
	%t7 = mul nsw i32 1, 1
	%t8 = mul nsw i32 %t7, 4
	%t32 = getelementptr inbounds [6 x i32], [6 x i32]* @arr, i64 0, i64 0
	%t33 = bitcast i32* %t32 to i8*
	%t35 = sext i32 %t8 to i64
	%t34 = getelementptr inbounds i8, i8* %t33, i64 %t35
	%t9 = bitcast i8* %t34 to i32*
	%t10 = mul nsw i32 2, 1
	%t11 = mul nsw i32 %t10, 4
	%t36 = getelementptr inbounds [6 x i32], [6 x i32]* @arr, i64 0, i64 0
	%t37 = bitcast i32* %t36 to i8*
	%t39 = sext i32 %t11 to i64
	%t38 = getelementptr inbounds i8, i8* %t37, i64 %t39
	%t12 = bitcast i8* %t38 to i32*
	%t13 = mul nsw i32 3, 1
	%t14 = mul nsw i32 %t13, 4
	%t40 = getelementptr inbounds [6 x i32], [6 x i32]* @arr, i64 0, i64 0
	%t41 = bitcast i32* %t40 to i8*
	%t43 = sext i32 %t14 to i64
	%t42 = getelementptr inbounds i8, i8* %t41, i64 %t43
	%t15 = bitcast i8* %t42 to i32*
	%t16 = mul nsw i32 4, 1
	%t17 = mul nsw i32 %t16, 4
	%t44 = getelementptr inbounds [6 x i32], [6 x i32]* @arr, i64 0, i64 0
	%t45 = bitcast i32* %t44 to i8*
	%t47 = sext i32 %t17 to i64
	%t46 = getelementptr inbounds i8, i8* %t45, i64 %t47
	%t18 = bitcast i8* %t46 to i32*
	%t19 = mul nsw i32 5, 1
	%t20 = mul nsw i32 %t19, 4
	%t48 = getelementptr inbounds [6 x i32], [6 x i32]* @arr, i64 0, i64 0
	%t49 = bitcast i32* %t48 to i8*
	%t51 = sext i32 %t20 to i64
	%t50 = getelementptr inbounds i8, i8* %t49, i64 %t51
	%t21 = bitcast i8* %t50 to i32*
	%t52 = load i32, i32* %l1, align 4
	%t22 = mul nsw i32 %t52, 1
	%t23 = mul nsw i32 %t22, 4
	%t53 = getelementptr inbounds [6 x i32], [6 x i32]* @arr, i64 0, i64 0
	%t54 = bitcast i32* %t53 to i8*
	%t56 = sext i32 %t23 to i64
	%t55 = getelementptr inbounds i8, i8* %t54, i64 %t56
	%t24 = bitcast i8* %t55 to i32*
	store i32 0, i32* %l0, align 4
	store i32 1, i32* %t6, align 4
	store i32 2, i32* %t9, align 4
	store i32 33, i32* %t12, align 4
	store i32 4, i32* %t15, align 4
	store i32 5, i32* %t18, align 4
	store i32 6, i32* %t21, align 4
	store i32 0, i32* %l1, align 4
	store i32 0, i32* %l2, align 4
	br label %.L1
.L1:
	%t57 = load i32, i32* %l1, align 4
	%t25 = icmp slt i32 %t57, 6
	br i1 %t25, label %.L2, label %.L3
.L2:
	%t58 = load i32, i32* %t24, align 4
	store i32 %t58, i32* %l3, align 4
	%t59 = load i32, i32* %l2, align 4
	%t60 = load i32, i32* %l3, align 4
	%t26 = add nsw i32 %t59, %t60
	store i32 %t26, i32* %l2, align 4
	%t61 = load i32, i32* %l1, align 4
	%t27 = add nsw i32 %t61, 1
	store i32 %t27, i32* %l1, align 4
	br label %.L1
.L3:
	%t62 = load i32, i32* %l2, align 4
	store i32 %t62, i32* %l0, align 4
	%t63 = load i32, i32* %l0, align 4
	ret i32 %t63
}
declare i32 @getint(...);
declare i32 @getch(...);
declare void @putint(i32);
declare void @putch(i32);
declare void @putstr(i8*);
declare i32 @getarray(i32*);
declare void @putarray(i32, i32*);
declare float @getfloat(...);
declare void @putfloat(float);
declare i32 @getfarray(float*);
declare void @putfarray(i32, float*);
